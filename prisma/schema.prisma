generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id String @id @default(uuid()) @db.Uuid
  name String @db.VarChar(100)
  email String @db.VarChar(100) @unique
  username String @db.VarChar(100) @unique
  password String @db.Text
  imgUrl String? @db.Text @map("img_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  tweets Tweet[]
  likes Like[]
  retweets Retweet[]
  followers Follower[] @relation("userId")
  follow Follower[] @relation("followerId")

  @@map("usuario")
}

model Tweet {
  id String @id @default(uuid()) @db.Uuid
  content String @db.VarChar(400)
  type String @db.Char(1)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId String @db.Uuid @map("user_id")
  user Usuario @relation(fields: [userId], references: [id])

  likes Like[]
  retweets Retweet[]

  @@map("tweet")
}

model Like {
  id String @id @default(uuid()) @db.Uuid 
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId String @db.Uuid @map("user_id")
  user Usuario @relation(fields: [userId], references: [id])

  tweetId String? @db.Uuid @map("tweet_id")
  tweet Tweet? @relation(fields: [tweetId], references: [id]) 

  retweetId String? @db.Uuid @map("retweet_id")
  retweet Retweet? @relation(fields: [retweetId], references: [id])


  @@map("like")
}

model Retweet {
  id String @id @default(uuid()) @db.Uuid
  content String @db.VarChar(400)
  type String @db.Char(1)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  tweetId String @db.Uuid @map("tweet_id")
  tweet Tweet @relation(fields: [tweetId], references: [id])

  userId String @db.Uuid @map("user_id")
  user Usuario @relation(fields: [userId], references: [id])

  likes Like[]

  @@map("retweet")
}

model Follower {
  id String @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId String @db.Uuid @map("user_id")
  user Usuario @relation("userId" ,fields: [userId], references: [id])

  followerId String @db.Uuid @map("follower_id")
  follower Usuario @relation("followerId" ,fields: [followerId], references: [id])

  @@map("follower")
}